# -*- coding: utf-8 -*-
"""augmenter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-VFcTLl9n5N7zPxETdD93qACZR9p1RCL
"""

from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import pandas as pd
from collections import Counter
from tqdm import tqdm
import torch

device = "cuda" if torch.cuda.is_available() else "cpu"

tokenizer = AutoTokenizer.from_pretrained("humarin/chatgpt_paraphraser_on_T5_base")

model = AutoModelForSeq2SeqLM.from_pretrained("humarin/chatgpt_paraphraser_on_T5_base").to(device)
model.eval()

def paraphrase(
        question,
        num_beams=5,
        num_beam_groups=5,
        num_return_sequences=5,
        repetition_penalty=10.0,
        diversity_penalty=3.0,
        no_repeat_ngram_size=2,
        temperature=0.5,
        max_length=128
):
    input_ids = tokenizer(
        f'paraphrase: {question}',
        return_tensors="pt", padding="longest",
        max_length=max_length,
        truncation=True,
    ).input_ids.to(device)

    outputs = model.generate(
        input_ids, temperature=temperature, repetition_penalty=repetition_penalty,
        num_return_sequences=num_return_sequences, no_repeat_ngram_size=no_repeat_ngram_size,
        num_beams=num_beams, num_beam_groups=num_beam_groups,
        max_length=max_length, diversity_penalty=diversity_penalty
    )

    res = tokenizer.batch_decode(outputs, skip_special_tokens=True)

    return res

df_train = pd.read_csv('../../data/train/train_polyhope_english.csv')
df_test = pd.read_csv('../../data/test/test_polyhope_english.csv')
df_val = pd.read_csv('../../data/val/val_polyhope_english.csv')

counter_train = Counter(df_train['multiclass'].tolist())
counter_test = Counter(df_test['multiclass'].tolist())
counter_val = Counter(df_test['multiclass'].tolist())

max_train = counter_train['Not Hope']
train_gh_req = max_train - counter_train['Generalized Hope']
train_rh_req = max_train - counter_train['Realistic Hope']
train_uh_req = max_train - counter_train['Unrealistic Hope']

train_gh_factor = int(max_train/counter_train['Generalized Hope'])
train_rh_factor = int(max_train/counter_train['Realistic Hope'])
train_uh_factor = int(max_train/counter_train['Unrealistic Hope'])

train_req = {'Generalized Hope': train_gh_req,
             'Realistic Hope': train_rh_req,
             'Unrealistic Hope': train_uh_req
             }
train_factor = {'Generalized Hope': train_gh_factor,
                'Realistic Hope': train_rh_factor,
                'Unrealistic Hope': train_uh_factor
                }

train_augments_texts = []
train_augments_labels = []

for t, l in tqdm(zip(df_train['text'].tolist(), df_train['multiclass'].tolist()),
                 total=len(df_train['text'].tolist())):
    if l == 'Not Hope':
        train_augments_texts.append(t)
        train_augments_labels.append(l)
        continue
    if train_req[l] < 0:
        continue
    train_augments_texts.append(t)
    train_augments_labels.append(l)
    aug = paraphrase(t, num_return_sequences=train_factor[l])
    train_augments_labels.extend([l]*train_factor[l])
    train_augments_texts.extend(aug)
    train_req[l] -= train_factor[l]

df_new = pd.DataFrame()

df_new['text'] = train_augments_texts
df_new['multiclass'] = train_augments_labels

df_new.to_csv('augented_file.csv', index=False)

len(train_augments_texts)

temp = Counter(train_augments_labels)

